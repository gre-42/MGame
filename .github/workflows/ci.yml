name: CI

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      job_name:
        description: "The name of the job to run"
      build_type:
        description: "The CMake build-type"
        default: Release
        required: true

jobs:
  build-ubuntu:
    if: (github.event.inputs.job_name == '') || (github.event.inputs.job_name == 'build-ubuntu')
    runs-on: ubuntu-24.04

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
            ninja-build \
            libglfw3-dev \
            libopenal-dev \
            libalut-dev \
            libssl-dev \
            g++-14

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build, package and test
        # run: CC=clang CXX=clang++ make CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
        run: CC=gcc-14 CXX=g++-14 make CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
        # run: make CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: osm-rally-artifact-ubuntu
          path: |
            data
            GU${{ github.event.inputs.build_type || 'Release' }}
            osm_racing_game
            osm_racing_game.cmd

  build-msys2:
    if: (github.event.inputs.job_name == '') || (github.event.inputs.job_name == 'build-msys2')
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: msys2/setup-msys2@v2

      - name: Install dependencies
        run: |
          pacman --noconfirm -S \
            make \
            mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-freealut \
            mingw-w64-x86_64-gcc \
            mingw-w64-x86_64-glfw \
            mingw-w64-x86_64-ninja \
            mingw-w64-x86_64-openal \
            mingw-w64-x86_64-openssl \
            mingw-w64-x86_64-vulkan-devel \
            rsync

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build, package and test
        # run: CC=clang CXX=clang++ make CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
        run: make CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: osm-rally-artifact-msys2
          path: |
            GM${{ github.event.inputs.build_type || 'Release' }}

  build-msvc:
    if: (github.event.inputs.job_name == '') || (github.event.inputs.job_name == 'build-msvc')
    runs-on: windows-latest

    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: Disable Windows Defender
        run: Set-MpPreference -DisableRealtimeMonitoring $true

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        shell: cmd
        # Disabled because the OpenSSL version was outdated (07.08.2025)
        # choco install openssl -y || exit /b
        run: |
          PowerShell -ExecutionPolicy Bypass Mlib/install_openssl.ps1 || exit /b
          PowerShell -ExecutionPolicy Bypass Mlib/build_openal_soft_and_freealut.ps1 || exit /b
          set CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          cmd /C Mlib\build_recastnavigation.cmd || exit /b
          cmd /C Mlib\build_zlib.cmd || exit /b

      - name: Build
        shell: cmd
        run: |
          set CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          cmd /C Mlib\build_scene_renderer.cmd || exit /b

      - name: Package
        shell: cmd
        run: |
          set CMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          cmd /C Mlib\package_scene_renderer.cmd || exit /b

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: osm-rally-artifact-msvc
          path: |
            Mlib/GVS/Bin/${{ github.event.inputs.build_type || 'Release' }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-msvc]
    steps:
      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: osm-rally-artifact-ubuntu
          path: MGame

      - name: Download MSVC artifact
        uses: actions/download-artifact@v4
        with:
          name: osm-rally-artifact-msvc
          path: MGame/GVS${{ github.event.inputs.build_type || 'Release' }}

      # Restore execute permissions, they are lost during artifact upload:
      # https://github.com/actions/upload-artifact?tab=readme-ov-file#permission-loss
      - name: Create ZIP archive
        run: |
          chmod +x MGame/osm_racing_game MGame/GURelease/download_heightmap
          chmod +x MGame/osm_racing_game MGame/GURelease/render_scene_file
          zip -r MGame.zip MGame

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: MGame.zip
          token: ${{ secrets.GITHUB_TOKEN }}
